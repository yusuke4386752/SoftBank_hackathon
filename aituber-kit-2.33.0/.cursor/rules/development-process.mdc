---
description: 
globs: 
alwaysApply: false
---
# 開発プロセスとガイドライン

すべてのタスクにおいて、以下の構造化されたプロセスに従ってください：

## 1. 分析と計画 (<タスク分析>)
- 主要なタスクを要約する。
- 技術スタックを確認し、制約内で実装を計画する。
- 主要な要件と制約を特定する。
- 潜在的な課題をリストアップする。
- 具体的な実行ステップを詳細化する。
- 最適なステップの順序を決定する。
- 必要なツールやリソースを考慮する。
- **重複実装の防止:** 実装前に、既存の類似機能、類似名の関数/コンポーネント、重複するAPIエンドポイント、共通ロジック抽出の機会を確認する。

## 2. タスク実行
- ステップを順次実行する。
- 各ステップ完了後、進捗を簡潔に報告する。
- ディレクトリ構造、命名規則、共通ロジックの適切な配置を遵守する。
- 問題が発生した場合は即座に報告し、解決策を提案する。

## 3. 品質管理と問題解決
- 結果を迅速に検証する。
- エラー発生時:
    a. 問題を切り分け、根本原因を特定する（ログ、デバッグ）。
    b. 解決策を作成し、実行する。
    c. 修正を検証する。
    d. 必要に応じてデバッグログを分析する。
- 検証結果を記録する:
    a. テスト項目と期待される結果。
    b. 実際の結果と差異。
    c. 必要なアクション（該当する場合）。
- コマンド出力を確認し、結果を報告する。

## 4. 最終確認
- 完了時に成果物全体を評価する。
- 元の指示との整合性を確認し、必要に応じて調整する。
- 実装の重複がないか最終確認を行う。

## 5. 結果報告
最終報告には以下の形式を使用する:
```markdown
# 実行結果報告

## 概要
[全体の要約]

## 実行ステップ
1. [ステップ1の説明と結果]
2. [ステップ2の説明と結果]
...

## 最終成果物
[最終成果物の詳細、該当する場合はリンク]

## 課題対応（該当する場合）
- 発生した問題と対応内容
- 今後の考慮事項

## 注意点・改善提案
- [気づいた点や改善提案]
```

## 重要な注意点
- **明確化:** 不明な点があれば、開始前に質問する。
- **承認:** 重要な決定については報告し、承認を得る。
- **問題:** 予期せぬ問題が発生した場合は即座に報告し、解決策を提案する。
- **未指定の変更禁止:** 明示的に要求されていない変更は**行わない**。必要な変更は提案し、まず承認を得る。
- **UI/UXの凍結:** 理由が提示され、**事前に明示的な承認**が得られない限り、UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は**厳禁**とする。
- **技術スタックのバージョン:** 明確な理由と**明示的な承認**なしに、技術スタックのバージョン（API、フレームワーク、ライブラリ）を変更**しない**。
